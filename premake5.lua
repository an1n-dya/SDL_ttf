-- SDL_ttf Premake5 Module for Cinix
-- This script builds SDL_ttf as a static or shared library that can be included in other projects

project "SDL_ttf"
    kind "StaticLib" -- Default to static, can be overridden in main project
    language "C"
    cdialect "C99"
    
    targetname "SDL_ttf"
    
    -- Use the workspace's output directories by default
    targetdir ("%{wks.location}/bin/" .. outputdir .. "/%{prj.name}")
    objdir ("%{wks.location}/bin-int/" .. outputdir .. "/%{prj.name}")
    
    -- Setup directories
    local TTF_DIR = _SCRIPT_DIR
    local TTF_SRC_DIR = TTF_DIR .. "/src"
    local TTF_INCLUDE_DIR = TTF_DIR .. "/include"
    local FREETYPE_DIR = TTF_DIR .. "/external/freetype"
    
    -- Include directories
    includedirs {
        TTF_INCLUDE_DIR,
        FREETYPE_DIR .. "/include",
        "%{IncludeDir.SDL3}" -- Assumes IncludeDir.SDL3 is defined in main premake file
    }
    
    -- Helper function to ensure directory exists
    local function ensureDir(dir)
        if not os.isdir(dir) then
            os.execute("mkdir -p " .. dir)
        end
    end
    
    -- Create SDL_ttf_build_config.h - runs during prebuildcommands
    local function generateBuildConfig()
        local configDir = TTF_INCLUDE_DIR .. "/build-generated"
        
        ensureDir(configDir)
        
        local file = io.open(configDir .. "/SDL_ttf_build_config.h", "w")
        if file then
            file:write("/* Generated by premake5 */\n")
            file:write("#ifndef SDL_ttf_build_config_h_\n")
            file:write("#define SDL_ttf_build_config_h_\n\n")
            
            -- Define FreeType settings
            file:write("#define TTF_USE_FREETYPE 1\n")
            file:write("#define FT_CONFIG_OPTION_USE_PNG 0\n")
            file:write("#define FT_CONFIG_OPTION_USE_HARFBUZZ 0\n")
            
            -- Platform-specific definitions
            if os.host() == "windows" then
                file:write("#define SDL_PLATFORM_WINDOWS 1\n")
            elseif os.host() == "linux" then
                file:write("#define SDL_PLATFORM_LINUX 1\n")
            end
            
            file:write("\n#endif /* SDL_ttf_build_config_h_ */\n")
            file:close()
            
            print("Generated SDL_ttf_build_config.h in " .. configDir)
        else
            print("Error: Could not create SDL_ttf_build_config.h")
        end
    end
    
    -- Run build config generation before build
    prebuildcommands {
        function()
            generateBuildConfig()
            return 0
        end
    }
    
    -- Core SDL_ttf source files
    files {
        TTF_SRC_DIR .. "/*.c",
        TTF_INCLUDE_DIR .. "/*.h"
    }
    
    -- FreeType source files
    files {
        FREETYPE_DIR .. "/src/autofit/autofit.c",
        FREETYPE_DIR .. "/src/base/ftbase.c",
        FREETYPE_DIR .. "/src/base/ftbbox.c",
        FREETYPE_DIR .. "/src/base/ftbdf.c",
        FREETYPE_DIR .. "/src/base/ftbitmap.c",
        FREETYPE_DIR .. "/src/base/ftcid.c",
        FREETYPE_DIR .. "/src/base/ftdebug.c",
        FREETYPE_DIR .. "/src/base/ftfstype.c",
        FREETYPE_DIR .. "/src/base/ftgasp.c",
        FREETYPE_DIR .. "/src/base/ftglyph.c",
        FREETYPE_DIR .. "/src/base/ftgxval.c",
        FREETYPE_DIR .. "/src/base/ftinit.c",
        FREETYPE_DIR .. "/src/base/ftmm.c",
        FREETYPE_DIR .. "/src/base/ftotval.c",
        FREETYPE_DIR .. "/src/base/ftpatent.c",
        FREETYPE_DIR .. "/src/base/ftpfr.c",
        FREETYPE_DIR .. "/src/base/ftstroke.c",
        FREETYPE_DIR .. "/src/base/ftsynth.c",
        FREETYPE_DIR .. "/src/base/ftsystem.c",
        FREETYPE_DIR .. "/src/base/fttype1.c",
        FREETYPE_DIR .. "/src/base/ftwinfnt.c",
        FREETYPE_DIR .. "/src/bdf/bdf.c",
        FREETYPE_DIR .. "/src/cache/ftcache.c",
        FREETYPE_DIR .. "/src/cff/cff.c",
        FREETYPE_DIR .. "/src/cid/type1cid.c",
        FREETYPE_DIR .. "/src/gzip/ftgzip.c",
        FREETYPE_DIR .. "/src/lzw/ftlzw.c",
        FREETYPE_DIR .. "/src/pcf/pcf.c",
        FREETYPE_DIR .. "/src/pfr/pfr.c",
        FREETYPE_DIR .. "/src/psaux/psaux.c",
        FREETYPE_DIR .. "/src/pshinter/pshinter.c",
        FREETYPE_DIR .. "/src/psnames/psnames.c",
        FREETYPE_DIR .. "/src/raster/raster.c",
        FREETYPE_DIR .. "/src/sfnt/sfnt.c",
        FREETYPE_DIR .. "/src/smooth/smooth.c",
        FREETYPE_DIR .. "/src/truetype/truetype.c",
        FREETYPE_DIR .. "/src/type1/type1.c",
        FREETYPE_DIR .. "/src/type42/type42.c",
        FREETYPE_DIR .. "/src/winfonts/winfnt.c"
    }
    
    -- Common defines
    defines {
        "FT2_BUILD_LIBRARY",
        "TTF_USE_FREETYPE",
        "SDL_TTF_DYNAMIC_API=0",
        -- Disable unnecessary FreeType features
        "FT_CONFIG_OPTION_NO_ASSEMBLER",
        "FT_CONFIG_OPTION_USE_PNG=0",
        "FT_CONFIG_OPTION_USE_HARFBUZZ=0"
    }
    
    -- Include FreeType configuration
    includedirs {
        FREETYPE_DIR .. "/include",
        -- Use the build config header
        TTF_INCLUDE_DIR .. "/build-generated"
    }
    
    -- Static library config
    filter "kind:StaticLib"
        defines {
            "SDL_TTF_STATIC_LIB"
        }
    
    -- Shared library config
    filter "kind:SharedLib"
        defines {
            "DLL_EXPORT",
            "SDL_TTF_BUILDING_LIBRARY"
        }
        
        links {
            "SDL3"
        }
        
        filter {"kind:SharedLib", "system:linux"}
            linkoptions { "-Wl,-rpath,$ORIGIN" }
    
    -- Windows specific
    filter "system:windows"
        defines {
            "_WINDOWS",
            "UNICODE", 
            "_UNICODE"
        }
    
    -- Linux specific
    filter "system:linux"
        buildoptions { "-fPIC" }
        defines { "_REENTRANT" }
        
        links {
            "m"
        }
    
    -- Debug configuration
    filter "configurations:Debug"
        defines { "DEBUG" }
        symbols "On"
    
    -- Release configuration
    filter "configurations:Release"
        defines { "NDEBUG" }
        optimize "On"
    
    -- Reset filter
    filter {}
